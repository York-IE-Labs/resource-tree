{"version":3,"sources":["../../src/DraggableRow.js","../../src/DroppablePath.js","../../src/Tree.js","App.js","index.js"],"names":["DraggableRow","className","restProps","ref","useRef","useDrop","accept","collect","monitor","index","isOver","object","dropClassName","drop","item","moveObject","useDrag","isDragging","drag","cursor","style","width","color","size","onClick","enterDir","DroppablePath","ResourceTree","useState","findNode","location","node","path","loc","createNode","newNode","tmpTree","tree","setTree","moveObjectDown","itemIndex","element","moveObjectUp","renderRows","children","v","i","key","tmp","setDepth","colSpan","console","paths","p","components","depth","text","type","label","description","renderPage","RNDContext","createDndContext","HTML5Backend","initial","App","manager","fontSize","DndProvider","current","dragDropManager","JSON","stringify","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.649d3503.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport {\n  FolderFill,\n  Folder2Open,\n  JournalRichtext as Journal,\n} from \"react-bootstrap-icons\";\n\nconst type = \"DraggableRow\";\n\nconst DraggableRow = ({\n  index,\n  object,\n  moveObject,\n  enterDir,\n  className = \"draggable-row\",\n  style,\n  ...restProps\n}) => {\n  const ref = useRef();\n  const [{ isOver, dropClassName }, drop] = useDrop({\n    accept: type,\n    collect: (monitor) => {\n      const { index: dragIndex } = monitor.getItem() || {};\n      if (dragIndex === index) {\n        return {};\n      }\n      return {\n        isOver: monitor.isOver() && object.type === \"directory\",\n        dropClassName: \"drop-object-here\",\n      };\n    },\n    drop: (item) => {\n      if (object.type === \"directory\" && item.index !== index) {\n        moveObject(item.index, index);\n      }\n    },\n  });\n\n  const [, drag] = useDrag({\n    item: { type, index },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const getIcon = () => {\n    // https://coolors.co/087e8b-ff5a5f-3c3c3c-f5f5f5-c1839f\n    return object.type === \"directory\" ? (\n      isOver ? (\n        <Folder2Open color=\"#087E8B\" size={20} />\n      ) : (\n        <FolderFill color=\"#087E8B\" size={20} />\n      )\n    ) : (\n      <Journal color=\"#3C3C3C\" size={20} />\n    );\n  };\n\n  const getLabel = () => {\n    return object.type === \"directory\" ? (\n      <button className=\"tree-link\" onClick={enterDir}>\n        {object.label}\n      </button>\n    ) : (\n      object.label\n    );\n  };\n\n  drop(drag(ref));\n\n  return (\n    <tr\n      ref={ref}\n      className={`${className} ${isOver ? dropClassName : \"\"}`}\n      style={{ cursor: \"move\", ...style }}\n      key={`draggable-row-${index}`}\n      {...restProps}\n    >\n      <td width=\"32px\">{getIcon()}</td>\n      <td>{getLabel()}</td>\n      <td>{object.description}</td>\n    </tr>\n  );\n};\n\nexport default DraggableRow;\n","import React, { useRef } from \"react\";\nimport { useDrop } from \"react-dnd\";\n\nconst type = \"DraggableRow\";\n\nconst DroppablePath = ({\n  index,\n  moveObject,\n  onClick,\n  text,\n  className = \"droppable-path\",\n  style,\n  ...restProps\n}) => {\n  const ref = useRef();\n  const [{ isOver, dropClassName }, drop] = useDrop({\n    accept: type,\n    collect: (monitor) => {\n      return {\n        isOver: monitor.isOver(),\n        dropClassName: \"drop-object-here\",\n      };\n    },\n    drop: (item) => {\n      moveObject(item.index, index);\n    },\n  });\n\n  drop(ref);\n\n  return (\n    <button\n      ref={ref}\n      key={`tree-link-${index}`}\n      className={`${className} tree-link ${isOver ? dropClassName : \"\"}`}\n      onClick={onClick}\n      {...restProps}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default DroppablePath;\n","import React, { useState } from 'react'\nimport DraggableRow from './DraggableRow'\nimport DroppablePath from './DroppablePath'\nimport {\n  FolderPlus,\n  FileEarmarkPlus as FilePlus,\n  ChevronRight\n} from 'react-bootstrap-icons'\n\nconst ResourceTree = ({ tree, setTree, className}) => {\n  const [depth, setDepth] = useState([])\n\n  const findNode = (location, node, path) => {\n    path.push(node.label)\n\n    if (!location.length) {\n      return { node, path }\n    }\n\n    let loc = location.shift()\n    return findNode(location, node.children[loc], path)\n  }\n\n  const createNode = (newNode) => {\n    let tmpTree = { ...tree }\n    let { node } = findNode([...depth], tmpTree, [])\n    node.children.push({ ...newNode })\n    setTree(tmpTree)\n  }\n\n  const moveObjectDown = (itemIndex, index) => {\n    let tmpTree = { ...tree }\n    let { node } = findNode([...depth], tmpTree, [])\n    const element = node.children[itemIndex]\n    node.children[index].children.push(element)\n    node.children.splice(itemIndex, 1)\n    setTree(tmpTree)\n  }\n\n  const moveObjectUp = (itemIndex, index) => {\n    let tmpTree = { ...tree }\n    // remove node from current location\n    let { node } = findNode([...depth], tmpTree, [])\n    const element = node.children[itemIndex]\n    node.children.splice(itemIndex, 1)\n\n    // add node to location\n    let { node: newNode } = findNode([...depth].slice(0, index), tmpTree, [])\n    newNode.children.push(element)\n\n    setTree(tmpTree)\n  }\n\n  const renderRows = (children) => {\n    if (!children.length) {\n      return (\n        <tr key={`no-objects`}>\n          <td colSpan={3}>No objects</td>\n        </tr>\n      )\n    }\n    return children.map((v, i) => {\n      return (\n        <DraggableRow\n          key={i}\n          index={i}\n          object={v}\n          moveObject={moveObjectDown}\n          enterDir={() => {\n            let tmp = [...depth]\n            tmp.push(i)\n            setDepth(tmp)\n          }}\n        />\n      )\n    })\n  }\n\n  const renderPage = () => {\n    const { node, path } = findNode([...depth], tree, [])\n    console.log('found node', node, path)\n    const { children } = node\n    const paths = path.map((p, i) => {\n      let components = []\n      if (depth.slice(0, i).length === depth.length) {\n        components.push(<span key={`tree-link-${i}`}>{p}</span>)\n      }\n      if (depth.slice(0, i).length !== depth.length) {\n        components.push(\n          <DroppablePath\n            index={i}\n            moveObject={moveObjectUp}\n            onClick={() => {\n              setDepth(depth.slice(0, i))\n            }}\n            text={p}\n          />\n        )\n      }\n      if (i < path.length - 1) {\n        components.push(\n          <span key={`tree-link-slash-${i}`}>\n            <ChevronRight className='tree-path-sep' size={12} />\n          </span>\n        )\n      }\n      return components\n    })\n\n    return [\n      <div className='tree-header'>\n        <span className='tree-path'>{paths}</span>\n        <button\n          onClick={() =>\n            createNode({\n              type: 'directory',\n              label: 'Untitled Folder',\n              description: 'New folder',\n              children: []\n            })\n          }\n        >\n          <FolderPlus size={24} />\n        </button>\n        <button\n          onClick={() =>\n            createNode({\n              type: 'object',\n              label: 'Untitled File',\n              description: 'New file'\n            })\n          }\n        >\n          <FilePlus size={24} />\n        </button>\n      </div>,\n      <table className={`resource-tree ${className}`}>\n        <tbody>{renderRows(children)}</tbody>\n      </table>\n    ]\n  }\n\n  return <div>{renderPage()}</div>\n}\n\nexport default ResourceTree\n","import React, { useRef, useState } from 'react'\nimport { ResourceTree } from 'resource-tree'\nimport { DndProvider, createDndContext } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nimport './App.css'\n\nconst RNDContext = createDndContext(HTML5Backend)\nconst initial = {\n  label: 'home',\n  children: [\n    {\n      type: 'directory',\n      label: 'Team Files',\n      description: '',\n      children: [\n        {\n          type: 'directory',\n          label: 'Drafts',\n          description: '',\n          children: []\n        },\n        {\n          type: 'directory',\n          label: 'Published',\n          description: '',\n          children: []\n        },\n        {\n          type: 'object',\n          label: 'Meeting Notes - 10/27',\n          description: 'Meeting notes with Mike'\n        }\n      ]\n    },\n    {\n      type: 'directory',\n      label: 'Personal Files',\n      description: '',\n      children: [\n        {\n          type: 'object',\n          label: 'Interesting Tech',\n          description: 'Notes on some companies and products'\n        },\n        {\n          type: 'object',\n          label: 'Ideas',\n          description: 'Product and company ideas'\n        }\n      ]\n    },\n    {\n      type: 'directory',\n      label: 'Archive',\n      description: '',\n      children: []\n    },\n    {\n      type: 'object',\n      label: \"Today's Notes\",\n      description: 'TODO Notes for today'\n    }\n  ]\n}\n\nfunction App() {\n  const [tree, setTree] = useState(initial)\n  const manager = useRef(RNDContext)\n  return (\n    <div className='app'>\n      <div>\n        <h2>Resource Tree</h2>\n        <dl style={{ fontSize: '14px' }}>\n          <dt>Create</dt>\n          <dd>\n            Use the buttons next to the path to create nodes in the resource\n            tree\n          </dd>\n          <dt>Move</dt>\n          <dd>\n            Drag and drop resources to folders to move down the path. Drop\n            resources on the desired path link to move up the path.\n          </dd>\n        </dl>\n      </div>\n      <br />\n      <div className='tree-wrapper'>\n        <DndProvider manager={manager.current.dragDropManager}>\n          <ResourceTree tree={tree} setTree={setTree} />\n        </DndProvider>\n      </div>\n      <br />\n      <div>\n        <h3>JSON Tree</h3>\n        <pre className='json'>\n          <code>{JSON.stringify(tree, undefined, 3)}</code>\n        </pre>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}